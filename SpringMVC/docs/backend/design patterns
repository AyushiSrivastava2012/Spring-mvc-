Design Patterns:
design patterns are programming language independent strategies for solving the common object-oriented design problems. That means, a design pattern
represents an idea, not a particular implementation.
By using the design patterns you can make your code more flexible, reusable and maintainable. It is the most important part because java internally 
follows design patterns.

Advantage of design pattern:

1.They are reusable in multiple projects.
2.They provide the solutions that help to define the system architecture.
3.They capture the software engineering experiences.
4.They provide transparency to the design of an application.
5.They are well-proved and testified solutions since they have been built upon the knowledge and experience of expert software developers.
6.Design patterns don't guarantee an absolute solution to a problem. They provide clarity to the system architecture and the possibility of building 
a better system.

We must use the design patterns during the analysis and requirement phase of SDLC(Software Development Life Cycle).
Design patterns ease the analysis and requirement phase of SDLC by providing information based on prior hands-on experiences.


Creational design patterns are concerned with the way of creating objects. 
These design patterns are used when a decision must be made at the time of instantiation of a class (i.e. creating an object of a class).

There are following 6 types of creational design patterns.

Factory Method Pattern
Abstract Factory Pattern
Singleton Pattern
Prototype Pattern
Builder Pattern
Object Pool Pattern


A)A Factory Pattern or Factory Method Pattern :
says that just define an interface or abstract class for creating an object but let the subclasses decide which class to instantiate. In other words, 
subclasses are responsible to create the instance of the class.The Factory Method Pattern is also known as Virtual Constructor.

Usage of Factory Design Pattern

When a class doesn't know what sub-classes will be required to create
When a class wants that its sub-classes specify the objects to be created.
When the parent classes choose the creation of objects to its sub-classes.


Note:A class that is declared as abstract is known as abstract class. It needs to be extended and its method implemented. It cannot be instantiated.
Mostly, we don't know about the implementation class (i.e. hidden to the end user) and object of the implementation class is provided by the factory method.

A factory method is the method that returns the instance of the class.

B)
Singleton Pattern says that just"define a class that has only one instance and provides a global point of access to it".

In other words, a class must ensure that only single instance should be created and single object can be used by all other classes.

There are two forms of singleton design pattern

Early Instantiation: creation of instance at load time.
Lazy Instantiation: creation of instance when required.

Advantage of Singleton design pattern

Saves memory because object is not created at each request. Only single instance is reused again and again.
Usage of Singleton design pattern

Singleton pattern is mostly used in multi-threaded and database applications. It is used in logging, caching, thread pools, configuration settings etc.

How to create Singleton design pattern?

To create the singleton class, we need to have static member of class, private constructor and static factory method.

Static member: It gets memory only once because of static, itcontains the instance of the Singleton class.
Private constructor: It will prevent to instantiate the Singleton class from outside the class.
Static factory method: This provides the global point of access to the Singleton object and returns the instance to the caller.

How to create Singleton design pattern?

To create the singleton class, we need to have static member of class, private constructor and static factory method.

Static member: It gets memory only once because of static, itcontains the instance of the Singleton class.
Private constructor: It will prevent to instantiate the Singleton class from outside the class.
Static factory method: This provides the global point of access to the Singleton object and returns the instance to the caller.
